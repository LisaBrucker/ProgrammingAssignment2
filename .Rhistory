?getmean
makeCacheMatrix <- function (x = matrix()) {
i <- NULL
set <- function (y){
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function (inverse) i <<- inverse
getinverse <- function () s
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function (x, ...) {
i <- x$getinverse
if (!is.null(i)){
message ("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
?matrix
n<-c(-1,1,-1,-2,0,2,-7,1,4)
makeCacheMatrix(x=matrix(n,nrow=3,ncol=3, byrow=TRUE))
cacheSolve(x)
makeCacheMatrix <- function (x = matrix()) {
i <- NULL
set <- function (y){
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function (inverse) i <<- inverse
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function (x, ...) {
i <- x$getinverse
if (!is.null(i)){
message ("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(x=matrix(n,nrow=3,ncol=3, byrow=TRUE))
x <- matrix(n,nrow=3,ncol=3, byrow=TRUE)
cacheSolve(x)
g <- makeCacheMatrix(x=matrix(n,nrow=3,ncol=3, byrow=TRUE))
x <- matrix(n,nrow=3,ncol=3, byrow=TRUE)
cacheSolve(g)
n<-c(-1,1,-1,-2,0,2,-7,1,4)
g <- makeCacheMatrix(x=matrix(n,nrow=3,ncol=3, byrow=TRUE))
x <- matrix(n,nrow=3,ncol=3, byrow=TRUE)
cacheSolve(g)
makeCacheMatrix <- function (x = matrix()) {
i <- NULL
set <- function (y){
x <<- y
i <<- NULL
}
get <- function () x
setinverse <- function (inverse) i <<- inverse
getinverse <- function () i
list (set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x, ...) {
i <- x$getinverse ()
if (!is.null(i)){
message ("getting cached data")
return (i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
n<-c(-1,1,-1,-2,0,2,-7,1,4)
g <- makeCacheMatrix(x=matrix(n,nrow=3,ncol=3, byrow=TRUE))
cacheSolve(g)
g <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(g)
solve(matrix(1:4,2,2))
g$get
g$get()
